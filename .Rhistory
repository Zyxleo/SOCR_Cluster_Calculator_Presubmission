a
typeof(a)
attributes(a)
a < c(1, 2, 3, 5)
a < c(1, 2, 3, 4)
a <- c(1, 2, 3, 4)
a[1]
a[c(F,F,F,T)]
deal <- function(cards) {
cards[1, ]
}
deal(deck)
shuffle(deck)
source("~/Documents/Academic/MDP_R_Learn/test3.R")
shuffle(deck)
source("~/Documents/Academic/MDP_R_Learn/test3.R")
deck2 <- shuffle(deck)
deal(deck2)
deck[1]
typeof(deck[1])
typeof(deck[1, ])
typeof(deck[, 1])
class(deck[, 1])
mean(deck[1])
mean(deck[,1])
mean(deck[,3])
mean(deck[\3])
mean(deck[\3])
deck
desk$face == "ace"
deck$face == "ace"
library(pryr)
as.environment("package:stats")
parent.env(globalenv())
parent.env(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
install.library(pryr)
install library(pryr)
install.packages(pryr)
environment()
ls(globalenv())
parent.env(globalenv())
ls(parent.env(globalenv())
)
View(deal)
source("~/Documents/Academic/MDP_R_Learn/test3.R")
cards[1, ]
deal <- function(cards) {
cards[1, ]
}
shuffle <- function(cards) {
random <- sample(1:52, size=52)
cards[random,]
}
deck2 <- shuffle(deck)
deal(deck2)
cards[1, ]
deal <- function(cards) {
cards[1, ]
}
shuffle <- function(cards) {
random <- sample(1:52, size=52)
cards[random,]
}
deck2 <- shuffle(deck)
deal(deck2)
source("~/Documents/Academic/MDP_R_Learn/test4.R")
show_env()
source("~/Documents/Academic/MDP_R_Learn/test4.R")
show_env()
source("~/Documents/Academic/MDP_R_Learn/test4.R")
source("~/Documents/Academic/MDP_R_Learn/test4.R")
shuffle()
deal()
deal()
source("~/Documents/Academic/MDP_R_Learn/test4.R")
shuffle <- function() {
random <- sample(1:52, size=52)
cards <- deck[random,]
assign("deck", cards, envir = globalenv())
}
shuffle()
deal()
source("~/Documents/Academic/MDP_R_Learn/test4.R")
card <- deck[1, ]
cards <- deck[-1, ]
assign("deck", cards, envir = globalenv())
card
deal <- function() {
card <- deck[1, ]
cards <- deck[-1, ]
assign("deck", cards, envir = globalenv())
card
}
shuffle <- function() {
random <- sample(1:52, size=52)
cards <- deck[random,]
assign("deck", cards, envir = globalenv())
}
shuffle()
deal()
source("~/Documents/Academic/MDP_R_Learn/test4.R")
deal <- function() {
card <- deck[1, ]
cards <- deck[-1, ]
assign("deck", cards, envir = globalenv())
card
}
shuffle <- function() {
random <- sample(1:52, size=52)
cards <- deck[random,]
assign("deck", cards, envir = globalenv())
}
shuffle()
deal()
deck2
deck <- deck2
source("~/Documents/Academic/MDP_R_Learn/test4.R")
card <- deck[1, ]
cards <- deck[-1, ]
assign("deck", cards, envir = globalenv())
card
deal <- function() {
card <- deck[1, ]
cards <- deck[-1, ]
assign("deck", cards, envir = globalenv())
card
}
shuffle <- function() {
random <- sample(1:52, size=52)
cards <- deck[random,]
assign("deck", cards, envir = globalenv())
}
shuffle()
deal()
deal()
environment()
source("~/Documents/Academic/MDP_R_Learn/test4.R")
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
shuffle()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deck <- deck2
source("~/Documents/Academic/MDP_R_Learn/test4.R")
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
shuffle()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
deal()
environment(setup)
environment(deak)
environment(deal)
environment(shuffle)
environment(deck)
source("~/Documents/Academic/MDP_R_Learn/test4.R")
source("~/Documents/Academic/MDP_R_Learn/test4.R")
source("~/Documents/Academic/MDP_R_Learn/test4.R")
shuffle()
deal()
deal()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
get_symbols()
get_symbols()
get_symbols()
get_symbols()
a <- get_symbols()
score(a)
source("~/Documents/Academic/MDP_R_Learn/p3.R")
score(a)
score(a)
a <- get_symbols()
a <- get_symbols()
a <- get_symbols()
a <- get_symbols()
a <- get_symbols()
a <- get_symbols()
score(c(0, 0, 0))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
prize * 2 ^ diamonds
score <- function(symbols) {
if (symbols[1] == symbols[2] && symbols[2] == symbols[3]) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if (all(symbols %in% c("B", "BB", "BBB"))) {
price <- 5
} else {
cherries <- sum(symbols == "C")
payouts <- c(0, 2, 5)
prize <- payouts[cherries + 1]
}
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds
}
play <- function() {
# step 1: generate symbols
symbols <- get_symbols()
# step 2: display the symbols
print(symbols)
# step 3: score the symbols
score(symbols)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
attr(play)
attributes(play)
attributes(A)
attributes(deck)
attr(deck, "names")
source("~/Documents/Academic/MDP_R_Learn/p3.R")
play()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
play()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
play()
play()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
play()
play()
play()
play()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
play()
play()
play()
play()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
play()
methods(print)
rolls <- expand.grid(die, die)
rolls
source("~/Documents/Academic/MDP_R_Learn/test4.R")
rolls <- expand.grid(die, die)
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
rolls&value <- rolls&Var1 + rolls&Var2
source("~/Documents/Academic/MDP_R_Learn/test4.R")
sum(rolls$value * rolls$prob)
rolls <- expand.grid(die, die)
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
rolls$value <- rolls$Var1 + rolls$Var2
rolls$prob1 <- prob[rolls$Val1]
source("~/Documents/Academic/MDP_R_Learn/test4.R")
rolls$prob2 <- prob[rolls$Var2]
rolls$prob <- rolls$prob1 * rolls$prob2
sum(rolls$value * rolls$prob)
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
expectedValue <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
prob = c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25,"C" = 0.01, "0" = 0.52)
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
combos$prize <- NA
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
sum(combos$prize * combos$prob)
}
expectedValue <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
prob = c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25,"C" = 0.01, "0" = 0.52)
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
combos$prize <- NA
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
sum(combos$prize * combos$prob)
}
expectedValue()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
prob = c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25,"C" = 0.01, "0" = 0.52)
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
combos$prizes <- NA
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prizes[i] <- score(symbols)
}
play()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
expectedValue()
expectedValue()
score(c("DD", "DD, "DD"))
score(c("DD", "DD, "DD"))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
score(c("DD", "DD, "DD"))
a <- c("DD, "DD, "DD")
a <- c("DD, "DD"", "DD")
a <- c("DD, "DD", "DD")
a <- c("DD", "DD", "DD")
score(a)
expectedValue()
score(c("C", "*",  "*"))
score(c("C", "C",  "*"))
score(c("C", "C",  "C"))
score(c("C", "C",  "B"))
score(c("C", "BB",  "B"))
score(c("BBB", "BB",  "B"))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
source("~/Documents/Academic/MDP_R_Learn/p3.R")
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
score(c("c", "c", "DD"))
score(c("C", "C", "DD"))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
score(c("C", "C", "DD"))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
score(c("C", "C", "DD"))
score(c("C", "C", "DD"))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
source("~/Documents/Academic/MDP_R_Learn/p3.R")
score(c("C", "C", "DD"))
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
?unmae
?uname
?unname
source("~/Documents/Academic/MDP_R_Learn/p3.R")
expectedValue()
source("~/Documents/Academic/MDP_R_Learn/rshiny/simple1/ui.R")
runApp('Documents/Academic/MDP_R_Learn/rshiny/simple1')
runApp("simple1")
pwd
?runApp
getwd()
runApp('Documents/Academic/MDP_R_Learn/rshiny/simple1')
runApp('Documents/Academic/MDP_R_Learn/rshiny/simple1')
runApp('Documents/Academic/MDP_R_Learn/rshiny/simple1', display.mode = "showcase")
runExample("11_timer")      # an automated timer
shiny::runApp('Documents/Academic/MDP_R_Learn/app_example')
runApp('Documents/Academic/MDP_R_Learn/rshiny/stockVis')
setwd("~/Documents/Academic/MDP_Projects/SOCR_Clustering_DimReduction/code")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
